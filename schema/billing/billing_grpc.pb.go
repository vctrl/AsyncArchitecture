// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package billing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BillingClient is the client API for Billing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillingClient interface {
	CreatePlusTransaction(ctx context.Context, in *CreatePlusTransactionRequest, opts ...grpc.CallOption) (*CreatePlusTransactionResponse, error)
	CreateMinusTransaction(ctx context.Context, in *CreateMinusTransactionRequest, opts ...grpc.CallOption) (*CreateMinusTransactionResponse, error)
	CloseBillingCycle(ctx context.Context, in *CloseBillingCycleRequest, opts ...grpc.CallOption) (*CloseBillingCycleResponse, error)
}

type billingClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingClient(cc grpc.ClientConnInterface) BillingClient {
	return &billingClient{cc}
}

func (c *billingClient) CreatePlusTransaction(ctx context.Context, in *CreatePlusTransactionRequest, opts ...grpc.CallOption) (*CreatePlusTransactionResponse, error) {
	out := new(CreatePlusTransactionResponse)
	err := c.cc.Invoke(ctx, "/Billing/CreatePlusTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) CreateMinusTransaction(ctx context.Context, in *CreateMinusTransactionRequest, opts ...grpc.CallOption) (*CreateMinusTransactionResponse, error) {
	out := new(CreateMinusTransactionResponse)
	err := c.cc.Invoke(ctx, "/Billing/CreateMinusTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingClient) CloseBillingCycle(ctx context.Context, in *CloseBillingCycleRequest, opts ...grpc.CallOption) (*CloseBillingCycleResponse, error) {
	out := new(CloseBillingCycleResponse)
	err := c.cc.Invoke(ctx, "/Billing/CloseBillingCycle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingServer is the server API for Billing service.
// All implementations must embed UnimplementedBillingServer
// for forward compatibility
type BillingServer interface {
	CreatePlusTransaction(context.Context, *CreatePlusTransactionRequest) (*CreatePlusTransactionResponse, error)
	CreateMinusTransaction(context.Context, *CreateMinusTransactionRequest) (*CreateMinusTransactionResponse, error)
	CloseBillingCycle(context.Context, *CloseBillingCycleRequest) (*CloseBillingCycleResponse, error)
	mustEmbedUnimplementedBillingServer()
}

// UnimplementedBillingServer must be embedded to have forward compatible implementations.
type UnimplementedBillingServer struct {
}

func (UnimplementedBillingServer) CreatePlusTransaction(context.Context, *CreatePlusTransactionRequest) (*CreatePlusTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlusTransaction not implemented")
}
func (UnimplementedBillingServer) CreateMinusTransaction(context.Context, *CreateMinusTransactionRequest) (*CreateMinusTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMinusTransaction not implemented")
}
func (UnimplementedBillingServer) CloseBillingCycle(context.Context, *CloseBillingCycleRequest) (*CloseBillingCycleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseBillingCycle not implemented")
}
func (UnimplementedBillingServer) mustEmbedUnimplementedBillingServer() {}

// UnsafeBillingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillingServer will
// result in compilation errors.
type UnsafeBillingServer interface {
	mustEmbedUnimplementedBillingServer()
}

func RegisterBillingServer(s grpc.ServiceRegistrar, srv BillingServer) {
	s.RegisterService(&Billing_ServiceDesc, srv)
}

func _Billing_CreatePlusTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlusTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).CreatePlusTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Billing/CreatePlusTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).CreatePlusTransaction(ctx, req.(*CreatePlusTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_CreateMinusTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMinusTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).CreateMinusTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Billing/CreateMinusTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).CreateMinusTransaction(ctx, req.(*CreateMinusTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Billing_CloseBillingCycle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseBillingCycleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).CloseBillingCycle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Billing/CloseBillingCycle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).CloseBillingCycle(ctx, req.(*CloseBillingCycleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Billing_ServiceDesc is the grpc.ServiceDesc for Billing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Billing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Billing",
	HandlerType: (*BillingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePlusTransaction",
			Handler:    _Billing_CreatePlusTransaction_Handler,
		},
		{
			MethodName: "CreateMinusTransaction",
			Handler:    _Billing_CreateMinusTransaction_Handler,
		},
		{
			MethodName: "CloseBillingCycle",
			Handler:    _Billing_CloseBillingCycle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "billing/billing.proto",
}
